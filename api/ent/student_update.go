// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/guardian"
	"goapi/ent/predicate"
	"goapi/ent/student"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentUpdate is the builder for updating Student entities.
type StudentUpdate struct {
	config
	hooks    []Hook
	mutation *StudentMutation
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdate) Where(ps ...predicate.Student) *StudentUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPhotoURL sets the "photo_url" field.
func (_u *StudentUpdate) SetPhotoURL(v string) *StudentUpdate {
	_u.mutation.SetPhotoURL(v)
	return _u
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_u *StudentUpdate) SetNillablePhotoURL(v *string) *StudentUpdate {
	if v != nil {
		_u.SetPhotoURL(*v)
	}
	return _u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (_u *StudentUpdate) ClearPhotoURL() *StudentUpdate {
	_u.mutation.ClearPhotoURL()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *StudentUpdate) SetFirstName(v string) *StudentUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableFirstName(v *string) *StudentUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *StudentUpdate) SetLastName(v string) *StudentUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableLastName(v *string) *StudentUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *StudentUpdate) ClearLastName() *StudentUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *StudentUpdate) SetMiddleName(v string) *StudentUpdate {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableMiddleName(v *string) *StudentUpdate {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *StudentUpdate) ClearMiddleName() *StudentUpdate {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *StudentUpdate) SetPhoneNumber(v string) *StudentUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *StudentUpdate) SetNillablePhoneNumber(v *string) *StudentUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdate) SetEmail(v string) *StudentUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableEmail(v *string) *StudentUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *StudentUpdate) ClearEmail() *StudentUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *StudentUpdate) SetDeleted(v bool) *StudentUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDeleted(v *bool) *StudentUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *StudentUpdate) SetDisabled(v bool) *StudentUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDisabled(v *bool) *StudentUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StudentUpdate) SetDeletedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDeletedAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StudentUpdate) ClearDeletedAt() *StudentUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *StudentUpdate) SetDisabledAt(v time.Time) *StudentUpdate {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableDisabledAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *StudentUpdate) ClearDisabledAt() *StudentUpdate {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_u *StudentUpdate) SetLastSignedInAt(v time.Time) *StudentUpdate {
	_u.mutation.SetLastSignedInAt(v)
	return _u
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableLastSignedInAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetLastSignedInAt(*v)
	}
	return _u
}

// ClearLastSignedInAt clears the value of the "last_signed_in_at" field.
func (_u *StudentUpdate) ClearLastSignedInAt() *StudentUpdate {
	_u.mutation.ClearLastSignedInAt()
	return _u
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_u *StudentUpdate) SetPhoneConfirmedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetPhoneConfirmedAt(v)
	return _u
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillablePhoneConfirmedAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetPhoneConfirmedAt(*v)
	}
	return _u
}

// ClearPhoneConfirmedAt clears the value of the "phone_confirmed_at" field.
func (_u *StudentUpdate) ClearPhoneConfirmedAt() *StudentUpdate {
	_u.mutation.ClearPhoneConfirmedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StudentUpdate) SetCreatedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StudentUpdate) SetNillableCreatedAt(v *time.Time) *StudentUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StudentUpdate) SetUpdatedAt(v time.Time) *StudentUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddGuardianIDs adds the "guardians" edge to the Guardian entity by IDs.
func (_u *StudentUpdate) AddGuardianIDs(ids ...string) *StudentUpdate {
	_u.mutation.AddGuardianIDs(ids...)
	return _u
}

// AddGuardians adds the "guardians" edges to the Guardian entity.
func (_u *StudentUpdate) AddGuardians(v ...*Guardian) *StudentUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGuardianIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdate) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearGuardians clears all "guardians" edges to the Guardian entity.
func (_u *StudentUpdate) ClearGuardians() *StudentUpdate {
	_u.mutation.ClearGuardians()
	return _u
}

// RemoveGuardianIDs removes the "guardians" edge to Guardian entities by IDs.
func (_u *StudentUpdate) RemoveGuardianIDs(ids ...string) *StudentUpdate {
	_u.mutation.RemoveGuardianIDs(ids...)
	return _u
}

// RemoveGuardians removes "guardians" edges to Guardian entities.
func (_u *StudentUpdate) RemoveGuardians(v ...*Guardian) *StudentUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGuardianIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *StudentUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *StudentUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StudentUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StudentUpdate) check() error {
	if v, ok := _u.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := student.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Student.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *StudentUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PhotoURL(); ok {
		_spec.SetField(student.FieldPhotoURL, field.TypeString, value)
	}
	if _u.mutation.PhotoURLCleared() {
		_spec.ClearField(student.FieldPhotoURL, field.TypeString)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(student.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(student.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(student.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(student.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(student.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(student.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(student.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(student.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(student.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(student.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSignedInAt(); ok {
		_spec.SetField(student.FieldLastSignedInAt, field.TypeTime, value)
	}
	if _u.mutation.LastSignedInAtCleared() {
		_spec.ClearField(student.FieldLastSignedInAt, field.TypeTime)
	}
	if value, ok := _u.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(student.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if _u.mutation.PhoneConfirmedAtCleared() {
		_spec.ClearField(student.FieldPhoneConfirmedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGuardiansIDs(); len(nodes) > 0 && !_u.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GuardiansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// StudentUpdateOne is the builder for updating a single Student entity.
type StudentUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *StudentMutation
}

// SetPhotoURL sets the "photo_url" field.
func (_u *StudentUpdateOne) SetPhotoURL(v string) *StudentUpdateOne {
	_u.mutation.SetPhotoURL(v)
	return _u
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillablePhotoURL(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetPhotoURL(*v)
	}
	return _u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (_u *StudentUpdateOne) ClearPhotoURL() *StudentUpdateOne {
	_u.mutation.ClearPhotoURL()
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *StudentUpdateOne) SetFirstName(v string) *StudentUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableFirstName(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *StudentUpdateOne) SetLastName(v string) *StudentUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableLastName(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *StudentUpdateOne) ClearLastName() *StudentUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *StudentUpdateOne) SetMiddleName(v string) *StudentUpdateOne {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableMiddleName(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *StudentUpdateOne) ClearMiddleName() *StudentUpdateOne {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *StudentUpdateOne) SetPhoneNumber(v string) *StudentUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillablePhoneNumber(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *StudentUpdateOne) SetEmail(v string) *StudentUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableEmail(v *string) *StudentUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *StudentUpdateOne) ClearEmail() *StudentUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *StudentUpdateOne) SetDeleted(v bool) *StudentUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDeleted(v *bool) *StudentUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *StudentUpdateOne) SetDisabled(v bool) *StudentUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDisabled(v *bool) *StudentUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *StudentUpdateOne) SetDeletedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDeletedAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *StudentUpdateOne) ClearDeletedAt() *StudentUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *StudentUpdateOne) SetDisabledAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableDisabledAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *StudentUpdateOne) ClearDisabledAt() *StudentUpdateOne {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_u *StudentUpdateOne) SetLastSignedInAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetLastSignedInAt(v)
	return _u
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableLastSignedInAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetLastSignedInAt(*v)
	}
	return _u
}

// ClearLastSignedInAt clears the value of the "last_signed_in_at" field.
func (_u *StudentUpdateOne) ClearLastSignedInAt() *StudentUpdateOne {
	_u.mutation.ClearLastSignedInAt()
	return _u
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_u *StudentUpdateOne) SetPhoneConfirmedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetPhoneConfirmedAt(v)
	return _u
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillablePhoneConfirmedAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetPhoneConfirmedAt(*v)
	}
	return _u
}

// ClearPhoneConfirmedAt clears the value of the "phone_confirmed_at" field.
func (_u *StudentUpdateOne) ClearPhoneConfirmedAt() *StudentUpdateOne {
	_u.mutation.ClearPhoneConfirmedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *StudentUpdateOne) SetCreatedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *StudentUpdateOne) SetNillableCreatedAt(v *time.Time) *StudentUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *StudentUpdateOne) SetUpdatedAt(v time.Time) *StudentUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddGuardianIDs adds the "guardians" edge to the Guardian entity by IDs.
func (_u *StudentUpdateOne) AddGuardianIDs(ids ...string) *StudentUpdateOne {
	_u.mutation.AddGuardianIDs(ids...)
	return _u
}

// AddGuardians adds the "guardians" edges to the Guardian entity.
func (_u *StudentUpdateOne) AddGuardians(v ...*Guardian) *StudentUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddGuardianIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_u *StudentUpdateOne) Mutation() *StudentMutation {
	return _u.mutation
}

// ClearGuardians clears all "guardians" edges to the Guardian entity.
func (_u *StudentUpdateOne) ClearGuardians() *StudentUpdateOne {
	_u.mutation.ClearGuardians()
	return _u
}

// RemoveGuardianIDs removes the "guardians" edge to Guardian entities by IDs.
func (_u *StudentUpdateOne) RemoveGuardianIDs(ids ...string) *StudentUpdateOne {
	_u.mutation.RemoveGuardianIDs(ids...)
	return _u
}

// RemoveGuardians removes "guardians" edges to Guardian entities.
func (_u *StudentUpdateOne) RemoveGuardians(v ...*Guardian) *StudentUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveGuardianIDs(ids...)
}

// Where appends a list predicates to the StudentUpdate builder.
func (_u *StudentUpdateOne) Where(ps ...predicate.Student) *StudentUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *StudentUpdateOne) Select(field string, fields ...string) *StudentUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Student entity.
func (_u *StudentUpdateOne) Save(ctx context.Context) (*Student, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *StudentUpdateOne) SaveX(ctx context.Context) *Student {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *StudentUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *StudentUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *StudentUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := student.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *StudentUpdateOne) check() error {
	if v, ok := _u.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := student.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Student.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *StudentUpdateOne) sqlSave(ctx context.Context) (_node *Student, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(student.Table, student.Columns, sqlgraph.NewFieldSpec(student.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Student.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, student.FieldID)
		for _, f := range fields {
			if !student.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != student.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PhotoURL(); ok {
		_spec.SetField(student.FieldPhotoURL, field.TypeString, value)
	}
	if _u.mutation.PhotoURLCleared() {
		_spec.ClearField(student.FieldPhotoURL, field.TypeString)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(student.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(student.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(student.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(student.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(student.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(student.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(student.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(student.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(student.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(student.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSignedInAt(); ok {
		_spec.SetField(student.FieldLastSignedInAt, field.TypeTime, value)
	}
	if _u.mutation.LastSignedInAtCleared() {
		_spec.ClearField(student.FieldLastSignedInAt, field.TypeTime)
	}
	if value, ok := _u.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(student.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if _u.mutation.PhoneConfirmedAtCleared() {
		_spec.ClearField(student.FieldPhoneConfirmedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedGuardiansIDs(); len(nodes) > 0 && !_u.mutation.GuardiansCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.GuardiansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Student{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{student.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

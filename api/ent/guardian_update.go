// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/guardian"
	"goapi/ent/predicate"
	"goapi/ent/student"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuardianUpdate is the builder for updating Guardian entities.
type GuardianUpdate struct {
	config
	hooks    []Hook
	mutation *GuardianMutation
}

// Where appends a list predicates to the GuardianUpdate builder.
func (_u *GuardianUpdate) Where(ps ...predicate.Guardian) *GuardianUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetPhotoURL sets the "photo_url" field.
func (_u *GuardianUpdate) SetPhotoURL(v string) *GuardianUpdate {
	_u.mutation.SetPhotoURL(v)
	return _u
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillablePhotoURL(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetPhotoURL(*v)
	}
	return _u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (_u *GuardianUpdate) ClearPhotoURL() *GuardianUpdate {
	_u.mutation.ClearPhotoURL()
	return _u
}

// SetTitle sets the "title" field.
func (_u *GuardianUpdate) SetTitle(v string) *GuardianUpdate {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableTitle(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *GuardianUpdate) SetFirstName(v string) *GuardianUpdate {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableFirstName(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *GuardianUpdate) SetLastName(v string) *GuardianUpdate {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableLastName(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *GuardianUpdate) ClearLastName() *GuardianUpdate {
	_u.mutation.ClearLastName()
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *GuardianUpdate) SetMiddleName(v string) *GuardianUpdate {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableMiddleName(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *GuardianUpdate) ClearMiddleName() *GuardianUpdate {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *GuardianUpdate) SetPhoneNumber(v string) *GuardianUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillablePhoneNumber(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *GuardianUpdate) SetEmail(v string) *GuardianUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableEmail(v *string) *GuardianUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *GuardianUpdate) ClearEmail() *GuardianUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *GuardianUpdate) SetDeleted(v bool) *GuardianUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableDeleted(v *bool) *GuardianUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *GuardianUpdate) SetDisabled(v bool) *GuardianUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableDisabled(v *bool) *GuardianUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GuardianUpdate) SetDeletedAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableDeletedAt(v *time.Time) *GuardianUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GuardianUpdate) ClearDeletedAt() *GuardianUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *GuardianUpdate) SetDisabledAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableDisabledAt(v *time.Time) *GuardianUpdate {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *GuardianUpdate) ClearDisabledAt() *GuardianUpdate {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_u *GuardianUpdate) SetLastSignedInAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetLastSignedInAt(v)
	return _u
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableLastSignedInAt(v *time.Time) *GuardianUpdate {
	if v != nil {
		_u.SetLastSignedInAt(*v)
	}
	return _u
}

// ClearLastSignedInAt clears the value of the "last_signed_in_at" field.
func (_u *GuardianUpdate) ClearLastSignedInAt() *GuardianUpdate {
	_u.mutation.ClearLastSignedInAt()
	return _u
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_u *GuardianUpdate) SetPhoneConfirmedAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetPhoneConfirmedAt(v)
	return _u
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillablePhoneConfirmedAt(v *time.Time) *GuardianUpdate {
	if v != nil {
		_u.SetPhoneConfirmedAt(*v)
	}
	return _u
}

// ClearPhoneConfirmedAt clears the value of the "phone_confirmed_at" field.
func (_u *GuardianUpdate) ClearPhoneConfirmedAt() *GuardianUpdate {
	_u.mutation.ClearPhoneConfirmedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GuardianUpdate) SetCreatedAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GuardianUpdate) SetNillableCreatedAt(v *time.Time) *GuardianUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GuardianUpdate) SetUpdatedAt(v time.Time) *GuardianUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *GuardianUpdate) AddStudentIDs(ids ...string) *GuardianUpdate {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *GuardianUpdate) AddStudents(v ...*Student) *GuardianUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the GuardianMutation object of the builder.
func (_u *GuardianUpdate) Mutation() *GuardianMutation {
	return _u.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *GuardianUpdate) ClearStudents() *GuardianUpdate {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *GuardianUpdate) RemoveStudentIDs(ids ...string) *GuardianUpdate {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *GuardianUpdate) RemoveStudents(v ...*Student) *GuardianUpdate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *GuardianUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GuardianUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *GuardianUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GuardianUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GuardianUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := guardian.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GuardianUpdate) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := guardian.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Guardian.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := guardian.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Guardian.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := guardian.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Guardian.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *GuardianUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guardian.Table, guardian.Columns, sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PhotoURL(); ok {
		_spec.SetField(guardian.FieldPhotoURL, field.TypeString, value)
	}
	if _u.mutation.PhotoURLCleared() {
		_spec.ClearField(guardian.FieldPhotoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(guardian.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(guardian.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(guardian.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(guardian.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(guardian.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(guardian.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(guardian.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(guardian.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(guardian.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(guardian.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(guardian.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(guardian.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(guardian.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(guardian.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(guardian.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSignedInAt(); ok {
		_spec.SetField(guardian.FieldLastSignedInAt, field.TypeTime, value)
	}
	if _u.mutation.LastSignedInAtCleared() {
		_spec.ClearField(guardian.FieldLastSignedInAt, field.TypeTime)
	}
	if value, ok := _u.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(guardian.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if _u.mutation.PhoneConfirmedAtCleared() {
		_spec.ClearField(guardian.FieldPhoneConfirmedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(guardian.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(guardian.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guardian.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// GuardianUpdateOne is the builder for updating a single Guardian entity.
type GuardianUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *GuardianMutation
}

// SetPhotoURL sets the "photo_url" field.
func (_u *GuardianUpdateOne) SetPhotoURL(v string) *GuardianUpdateOne {
	_u.mutation.SetPhotoURL(v)
	return _u
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillablePhotoURL(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetPhotoURL(*v)
	}
	return _u
}

// ClearPhotoURL clears the value of the "photo_url" field.
func (_u *GuardianUpdateOne) ClearPhotoURL() *GuardianUpdateOne {
	_u.mutation.ClearPhotoURL()
	return _u
}

// SetTitle sets the "title" field.
func (_u *GuardianUpdateOne) SetTitle(v string) *GuardianUpdateOne {
	_u.mutation.SetTitle(v)
	return _u
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableTitle(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetTitle(*v)
	}
	return _u
}

// SetFirstName sets the "first_name" field.
func (_u *GuardianUpdateOne) SetFirstName(v string) *GuardianUpdateOne {
	_u.mutation.SetFirstName(v)
	return _u
}

// SetNillableFirstName sets the "first_name" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableFirstName(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetFirstName(*v)
	}
	return _u
}

// SetLastName sets the "last_name" field.
func (_u *GuardianUpdateOne) SetLastName(v string) *GuardianUpdateOne {
	_u.mutation.SetLastName(v)
	return _u
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableLastName(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetLastName(*v)
	}
	return _u
}

// ClearLastName clears the value of the "last_name" field.
func (_u *GuardianUpdateOne) ClearLastName() *GuardianUpdateOne {
	_u.mutation.ClearLastName()
	return _u
}

// SetMiddleName sets the "middle_name" field.
func (_u *GuardianUpdateOne) SetMiddleName(v string) *GuardianUpdateOne {
	_u.mutation.SetMiddleName(v)
	return _u
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableMiddleName(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetMiddleName(*v)
	}
	return _u
}

// ClearMiddleName clears the value of the "middle_name" field.
func (_u *GuardianUpdateOne) ClearMiddleName() *GuardianUpdateOne {
	_u.mutation.ClearMiddleName()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *GuardianUpdateOne) SetPhoneNumber(v string) *GuardianUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillablePhoneNumber(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// SetEmail sets the "email" field.
func (_u *GuardianUpdateOne) SetEmail(v string) *GuardianUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableEmail(v *string) *GuardianUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *GuardianUpdateOne) ClearEmail() *GuardianUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *GuardianUpdateOne) SetDeleted(v bool) *GuardianUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableDeleted(v *bool) *GuardianUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *GuardianUpdateOne) SetDisabled(v bool) *GuardianUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableDisabled(v *bool) *GuardianUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *GuardianUpdateOne) SetDeletedAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableDeletedAt(v *time.Time) *GuardianUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *GuardianUpdateOne) ClearDeletedAt() *GuardianUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *GuardianUpdateOne) SetDisabledAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableDisabledAt(v *time.Time) *GuardianUpdateOne {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *GuardianUpdateOne) ClearDisabledAt() *GuardianUpdateOne {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_u *GuardianUpdateOne) SetLastSignedInAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetLastSignedInAt(v)
	return _u
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableLastSignedInAt(v *time.Time) *GuardianUpdateOne {
	if v != nil {
		_u.SetLastSignedInAt(*v)
	}
	return _u
}

// ClearLastSignedInAt clears the value of the "last_signed_in_at" field.
func (_u *GuardianUpdateOne) ClearLastSignedInAt() *GuardianUpdateOne {
	_u.mutation.ClearLastSignedInAt()
	return _u
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_u *GuardianUpdateOne) SetPhoneConfirmedAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetPhoneConfirmedAt(v)
	return _u
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillablePhoneConfirmedAt(v *time.Time) *GuardianUpdateOne {
	if v != nil {
		_u.SetPhoneConfirmedAt(*v)
	}
	return _u
}

// ClearPhoneConfirmedAt clears the value of the "phone_confirmed_at" field.
func (_u *GuardianUpdateOne) ClearPhoneConfirmedAt() *GuardianUpdateOne {
	_u.mutation.ClearPhoneConfirmedAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *GuardianUpdateOne) SetCreatedAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *GuardianUpdateOne) SetNillableCreatedAt(v *time.Time) *GuardianUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *GuardianUpdateOne) SetUpdatedAt(v time.Time) *GuardianUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_u *GuardianUpdateOne) AddStudentIDs(ids ...string) *GuardianUpdateOne {
	_u.mutation.AddStudentIDs(ids...)
	return _u
}

// AddStudents adds the "students" edges to the Student entity.
func (_u *GuardianUpdateOne) AddStudents(v ...*Student) *GuardianUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.AddStudentIDs(ids...)
}

// Mutation returns the GuardianMutation object of the builder.
func (_u *GuardianUpdateOne) Mutation() *GuardianMutation {
	return _u.mutation
}

// ClearStudents clears all "students" edges to the Student entity.
func (_u *GuardianUpdateOne) ClearStudents() *GuardianUpdateOne {
	_u.mutation.ClearStudents()
	return _u
}

// RemoveStudentIDs removes the "students" edge to Student entities by IDs.
func (_u *GuardianUpdateOne) RemoveStudentIDs(ids ...string) *GuardianUpdateOne {
	_u.mutation.RemoveStudentIDs(ids...)
	return _u
}

// RemoveStudents removes "students" edges to Student entities.
func (_u *GuardianUpdateOne) RemoveStudents(v ...*Student) *GuardianUpdateOne {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _u.RemoveStudentIDs(ids...)
}

// Where appends a list predicates to the GuardianUpdate builder.
func (_u *GuardianUpdateOne) Where(ps ...predicate.Guardian) *GuardianUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *GuardianUpdateOne) Select(field string, fields ...string) *GuardianUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Guardian entity.
func (_u *GuardianUpdateOne) Save(ctx context.Context) (*Guardian, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *GuardianUpdateOne) SaveX(ctx context.Context) *Guardian {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *GuardianUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *GuardianUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *GuardianUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := guardian.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *GuardianUpdateOne) check() error {
	if v, ok := _u.mutation.Title(); ok {
		if err := guardian.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Guardian.title": %w`, err)}
		}
	}
	if v, ok := _u.mutation.FirstName(); ok {
		if err := guardian.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Guardian.first_name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.PhoneNumber(); ok {
		if err := guardian.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Guardian.phone_number": %w`, err)}
		}
	}
	return nil
}

func (_u *GuardianUpdateOne) sqlSave(ctx context.Context) (_node *Guardian, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(guardian.Table, guardian.Columns, sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Guardian.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, guardian.FieldID)
		for _, f := range fields {
			if !guardian.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != guardian.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.PhotoURL(); ok {
		_spec.SetField(guardian.FieldPhotoURL, field.TypeString, value)
	}
	if _u.mutation.PhotoURLCleared() {
		_spec.ClearField(guardian.FieldPhotoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Title(); ok {
		_spec.SetField(guardian.FieldTitle, field.TypeString, value)
	}
	if value, ok := _u.mutation.FirstName(); ok {
		_spec.SetField(guardian.FieldFirstName, field.TypeString, value)
	}
	if value, ok := _u.mutation.LastName(); ok {
		_spec.SetField(guardian.FieldLastName, field.TypeString, value)
	}
	if _u.mutation.LastNameCleared() {
		_spec.ClearField(guardian.FieldLastName, field.TypeString)
	}
	if value, ok := _u.mutation.MiddleName(); ok {
		_spec.SetField(guardian.FieldMiddleName, field.TypeString, value)
	}
	if _u.mutation.MiddleNameCleared() {
		_spec.ClearField(guardian.FieldMiddleName, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(guardian.FieldPhoneNumber, field.TypeString, value)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(guardian.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(guardian.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(guardian.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(guardian.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(guardian.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(guardian.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(guardian.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(guardian.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.LastSignedInAt(); ok {
		_spec.SetField(guardian.FieldLastSignedInAt, field.TypeTime, value)
	}
	if _u.mutation.LastSignedInAtCleared() {
		_spec.ClearField(guardian.FieldLastSignedInAt, field.TypeTime)
	}
	if value, ok := _u.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(guardian.FieldPhoneConfirmedAt, field.TypeTime, value)
	}
	if _u.mutation.PhoneConfirmedAtCleared() {
		_spec.ClearField(guardian.FieldPhoneConfirmedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(guardian.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(guardian.FieldUpdatedAt, field.TypeTime, value)
	}
	if _u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.RemovedStudentsIDs(); len(nodes) > 0 && !_u.mutation.StudentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := _u.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Guardian{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{guardian.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

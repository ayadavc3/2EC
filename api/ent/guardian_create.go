// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/guardian"
	"goapi/ent/student"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// GuardianCreate is the builder for creating a Guardian entity.
type GuardianCreate struct {
	config
	mutation *GuardianMutation
	hooks    []Hook
}

// SetPhotoURL sets the "photo_url" field.
func (_c *GuardianCreate) SetPhotoURL(v string) *GuardianCreate {
	_c.mutation.SetPhotoURL(v)
	return _c
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_c *GuardianCreate) SetNillablePhotoURL(v *string) *GuardianCreate {
	if v != nil {
		_c.SetPhotoURL(*v)
	}
	return _c
}

// SetTitle sets the "title" field.
func (_c *GuardianCreate) SetTitle(v string) *GuardianCreate {
	_c.mutation.SetTitle(v)
	return _c
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableTitle(v *string) *GuardianCreate {
	if v != nil {
		_c.SetTitle(*v)
	}
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *GuardianCreate) SetFirstName(v string) *GuardianCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *GuardianCreate) SetLastName(v string) *GuardianCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableLastName(v *string) *GuardianCreate {
	if v != nil {
		_c.SetLastName(*v)
	}
	return _c
}

// SetMiddleName sets the "middle_name" field.
func (_c *GuardianCreate) SetMiddleName(v string) *GuardianCreate {
	_c.mutation.SetMiddleName(v)
	return _c
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableMiddleName(v *string) *GuardianCreate {
	if v != nil {
		_c.SetMiddleName(*v)
	}
	return _c
}

// SetPhoneNumber sets the "phone_number" field.
func (_c *GuardianCreate) SetPhoneNumber(v string) *GuardianCreate {
	_c.mutation.SetPhoneNumber(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *GuardianCreate) SetEmail(v string) *GuardianCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableEmail(v *string) *GuardianCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *GuardianCreate) SetDeleted(v bool) *GuardianCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableDeleted(v *bool) *GuardianCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// SetDisabled sets the "disabled" field.
func (_c *GuardianCreate) SetDisabled(v bool) *GuardianCreate {
	_c.mutation.SetDisabled(v)
	return _c
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableDisabled(v *bool) *GuardianCreate {
	if v != nil {
		_c.SetDisabled(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *GuardianCreate) SetDeletedAt(v time.Time) *GuardianCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableDeletedAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDisabledAt sets the "disabled_at" field.
func (_c *GuardianCreate) SetDisabledAt(v time.Time) *GuardianCreate {
	_c.mutation.SetDisabledAt(v)
	return _c
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableDisabledAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetDisabledAt(*v)
	}
	return _c
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_c *GuardianCreate) SetLastSignedInAt(v time.Time) *GuardianCreate {
	_c.mutation.SetLastSignedInAt(v)
	return _c
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableLastSignedInAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetLastSignedInAt(*v)
	}
	return _c
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_c *GuardianCreate) SetPhoneConfirmedAt(v time.Time) *GuardianCreate {
	_c.mutation.SetPhoneConfirmedAt(v)
	return _c
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillablePhoneConfirmedAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetPhoneConfirmedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *GuardianCreate) SetCreatedAt(v time.Time) *GuardianCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableCreatedAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *GuardianCreate) SetUpdatedAt(v time.Time) *GuardianCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableUpdatedAt(v *time.Time) *GuardianCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *GuardianCreate) SetID(v string) *GuardianCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *GuardianCreate) SetNillableID(v *string) *GuardianCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddStudentIDs adds the "students" edge to the Student entity by IDs.
func (_c *GuardianCreate) AddStudentIDs(ids ...string) *GuardianCreate {
	_c.mutation.AddStudentIDs(ids...)
	return _c
}

// AddStudents adds the "students" edges to the Student entity.
func (_c *GuardianCreate) AddStudents(v ...*Student) *GuardianCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddStudentIDs(ids...)
}

// Mutation returns the GuardianMutation object of the builder.
func (_c *GuardianCreate) Mutation() *GuardianMutation {
	return _c.mutation
}

// Save creates the Guardian in the database.
func (_c *GuardianCreate) Save(ctx context.Context) (*Guardian, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *GuardianCreate) SaveX(ctx context.Context) *Guardian {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GuardianCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GuardianCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *GuardianCreate) defaults() {
	if _, ok := _c.mutation.Title(); !ok {
		v := guardian.DefaultTitle
		_c.mutation.SetTitle(v)
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		v := guardian.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		v := guardian.DefaultDisabled
		_c.mutation.SetDisabled(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := guardian.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := guardian.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := guardian.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *GuardianCreate) check() error {
	if _, ok := _c.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Guardian.title"`)}
	}
	if v, ok := _c.mutation.Title(); ok {
		if err := guardian.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "Guardian.title": %w`, err)}
		}
	}
	if _, ok := _c.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Guardian.first_name"`)}
	}
	if v, ok := _c.mutation.FirstName(); ok {
		if err := guardian.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Guardian.first_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Guardian.phone_number"`)}
	}
	if v, ok := _c.mutation.PhoneNumber(); ok {
		if err := guardian.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Guardian.phone_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Guardian.deleted"`)}
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Guardian.disabled"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Guardian.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Guardian.updated_at"`)}
	}
	return nil
}

func (_c *GuardianCreate) sqlSave(ctx context.Context) (*Guardian, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Guardian.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *GuardianCreate) createSpec() (*Guardian, *sqlgraph.CreateSpec) {
	var (
		_node = &Guardian{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(guardian.Table, sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.PhotoURL(); ok {
		_spec.SetField(guardian.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := _c.mutation.Title(); ok {
		_spec.SetField(guardian.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(guardian.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(guardian.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.MiddleName(); ok {
		_spec.SetField(guardian.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := _c.mutation.PhoneNumber(); ok {
		_spec.SetField(guardian.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(guardian.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(guardian.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := _c.mutation.Disabled(); ok {
		_spec.SetField(guardian.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(guardian.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DisabledAt(); ok {
		_spec.SetField(guardian.FieldDisabledAt, field.TypeTime, value)
		_node.DisabledAt = value
	}
	if value, ok := _c.mutation.LastSignedInAt(); ok {
		_spec.SetField(guardian.FieldLastSignedInAt, field.TypeTime, value)
		_node.LastSignedInAt = value
	}
	if value, ok := _c.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(guardian.FieldPhoneConfirmedAt, field.TypeTime, value)
		_node.PhoneConfirmedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(guardian.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(guardian.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.StudentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   guardian.StudentsTable,
			Columns: guardian.StudentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(student.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// GuardianCreateBulk is the builder for creating many Guardian entities in bulk.
type GuardianCreateBulk struct {
	config
	err      error
	builders []*GuardianCreate
}

// Save creates the Guardian entities in the database.
func (_c *GuardianCreateBulk) Save(ctx context.Context) ([]*Guardian, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Guardian, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*GuardianMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *GuardianCreateBulk) SaveX(ctx context.Context) []*Guardian {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *GuardianCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *GuardianCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/organization"
	"goapi/ent/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// OrganizationUpdate is the builder for updating Organization entities.
type OrganizationUpdate struct {
	config
	hooks    []Hook
	mutation *OrganizationMutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdate) Where(ps ...predicate.Organization) *OrganizationUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *OrganizationUpdate) SetName(v string) *OrganizationUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableName(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdate) SetDescription(v string) *OrganizationUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDescription(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdate) ClearDescription() *OrganizationUpdate {
	_u.mutation.ClearDescription()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *OrganizationUpdate) SetLogoURL(v string) *OrganizationUpdate {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableLogoURL(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *OrganizationUpdate) ClearLogoURL() *OrganizationUpdate {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetEmail sets the "email" field.
func (_u *OrganizationUpdate) SetEmail(v string) *OrganizationUpdate {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableEmail(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *OrganizationUpdate) ClearEmail() *OrganizationUpdate {
	_u.mutation.ClearEmail()
	return _u
}

// SetWebsite sets the "website" field.
func (_u *OrganizationUpdate) SetWebsite(v string) *OrganizationUpdate {
	_u.mutation.SetWebsite(v)
	return _u
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableWebsite(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetWebsite(*v)
	}
	return _u
}

// ClearWebsite clears the value of the "website" field.
func (_u *OrganizationUpdate) ClearWebsite() *OrganizationUpdate {
	_u.mutation.ClearWebsite()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *OrganizationUpdate) SetPhoneNumber(v string) *OrganizationUpdate {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillablePhoneNumber(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *OrganizationUpdate) ClearPhoneNumber() *OrganizationUpdate {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetAddress sets the "address" field.
func (_u *OrganizationUpdate) SetAddress(v string) *OrganizationUpdate {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableAddress(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *OrganizationUpdate) ClearAddress() *OrganizationUpdate {
	_u.mutation.ClearAddress()
	return _u
}

// SetCity sets the "city" field.
func (_u *OrganizationUpdate) SetCity(v string) *OrganizationUpdate {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableCity(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// ClearCity clears the value of the "city" field.
func (_u *OrganizationUpdate) ClearCity() *OrganizationUpdate {
	_u.mutation.ClearCity()
	return _u
}

// SetState sets the "state" field.
func (_u *OrganizationUpdate) SetState(v string) *OrganizationUpdate {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableState(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *OrganizationUpdate) ClearState() *OrganizationUpdate {
	_u.mutation.ClearState()
	return _u
}

// SetZipCode sets the "zip_code" field.
func (_u *OrganizationUpdate) SetZipCode(v string) *OrganizationUpdate {
	_u.mutation.SetZipCode(v)
	return _u
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableZipCode(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetZipCode(*v)
	}
	return _u
}

// ClearZipCode clears the value of the "zip_code" field.
func (_u *OrganizationUpdate) ClearZipCode() *OrganizationUpdate {
	_u.mutation.ClearZipCode()
	return _u
}

// SetCountry sets the "country" field.
func (_u *OrganizationUpdate) SetCountry(v string) *OrganizationUpdate {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableCountry(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// ClearCountry clears the value of the "country" field.
func (_u *OrganizationUpdate) ClearCountry() *OrganizationUpdate {
	_u.mutation.ClearCountry()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *OrganizationUpdate) SetLanguage(v organization.Language) *OrganizationUpdate {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableLanguage(v *organization.Language) *OrganizationUpdate {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *OrganizationUpdate) ClearLanguage() *OrganizationUpdate {
	_u.mutation.ClearLanguage()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *OrganizationUpdate) SetTimezone(v string) *OrganizationUpdate {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableTimezone(v *string) *OrganizationUpdate {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *OrganizationUpdate) ClearTimezone() *OrganizationUpdate {
	_u.mutation.ClearTimezone()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *OrganizationUpdate) SetDeleted(v bool) *OrganizationUpdate {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDeleted(v *bool) *OrganizationUpdate {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *OrganizationUpdate) SetDisabled(v bool) *OrganizationUpdate {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDisabled(v *bool) *OrganizationUpdate {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationUpdate) SetDeletedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDeletedAt(v *time.Time) *OrganizationUpdate {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationUpdate) ClearDeletedAt() *OrganizationUpdate {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *OrganizationUpdate) SetDisabledAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableDisabledAt(v *time.Time) *OrganizationUpdate {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *OrganizationUpdate) ClearDisabledAt() *OrganizationUpdate {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OrganizationUpdate) SetCreatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OrganizationUpdate) SetNillableCreatedAt(v *time.Time) *OrganizationUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdate) SetUpdatedAt(v time.Time) *OrganizationUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdate) Mutation() *OrganizationMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *OrganizationUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *OrganizationUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Language(); ok {
		if err := organization.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Organization.language": %w`, err)}
		}
	}
	return nil
}

func (_u *OrganizationUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(organization.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(organization.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if _u.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(organization.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(organization.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(organization.FieldCity, field.TypeString, value)
	}
	if _u.mutation.CityCleared() {
		_spec.ClearField(organization.FieldCity, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(organization.FieldState, field.TypeString, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(organization.FieldState, field.TypeString)
	}
	if value, ok := _u.mutation.ZipCode(); ok {
		_spec.SetField(organization.FieldZipCode, field.TypeString, value)
	}
	if _u.mutation.ZipCodeCleared() {
		_spec.ClearField(organization.FieldZipCode, field.TypeString)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(organization.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.CountryCleared() {
		_spec.ClearField(organization.FieldCountry, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(organization.FieldLanguage, field.TypeEnum, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(organization.FieldLanguage, field.TypeEnum)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(organization.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(organization.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(organization.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(organization.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(organization.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// OrganizationUpdateOne is the builder for updating a single Organization entity.
type OrganizationUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *OrganizationMutation
}

// SetName sets the "name" field.
func (_u *OrganizationUpdateOne) SetName(v string) *OrganizationUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableName(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *OrganizationUpdateOne) SetDescription(v string) *OrganizationUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDescription(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// ClearDescription clears the value of the "description" field.
func (_u *OrganizationUpdateOne) ClearDescription() *OrganizationUpdateOne {
	_u.mutation.ClearDescription()
	return _u
}

// SetLogoURL sets the "logo_url" field.
func (_u *OrganizationUpdateOne) SetLogoURL(v string) *OrganizationUpdateOne {
	_u.mutation.SetLogoURL(v)
	return _u
}

// SetNillableLogoURL sets the "logo_url" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableLogoURL(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetLogoURL(*v)
	}
	return _u
}

// ClearLogoURL clears the value of the "logo_url" field.
func (_u *OrganizationUpdateOne) ClearLogoURL() *OrganizationUpdateOne {
	_u.mutation.ClearLogoURL()
	return _u
}

// SetEmail sets the "email" field.
func (_u *OrganizationUpdateOne) SetEmail(v string) *OrganizationUpdateOne {
	_u.mutation.SetEmail(v)
	return _u
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableEmail(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetEmail(*v)
	}
	return _u
}

// ClearEmail clears the value of the "email" field.
func (_u *OrganizationUpdateOne) ClearEmail() *OrganizationUpdateOne {
	_u.mutation.ClearEmail()
	return _u
}

// SetWebsite sets the "website" field.
func (_u *OrganizationUpdateOne) SetWebsite(v string) *OrganizationUpdateOne {
	_u.mutation.SetWebsite(v)
	return _u
}

// SetNillableWebsite sets the "website" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableWebsite(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetWebsite(*v)
	}
	return _u
}

// ClearWebsite clears the value of the "website" field.
func (_u *OrganizationUpdateOne) ClearWebsite() *OrganizationUpdateOne {
	_u.mutation.ClearWebsite()
	return _u
}

// SetPhoneNumber sets the "phone_number" field.
func (_u *OrganizationUpdateOne) SetPhoneNumber(v string) *OrganizationUpdateOne {
	_u.mutation.SetPhoneNumber(v)
	return _u
}

// SetNillablePhoneNumber sets the "phone_number" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillablePhoneNumber(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetPhoneNumber(*v)
	}
	return _u
}

// ClearPhoneNumber clears the value of the "phone_number" field.
func (_u *OrganizationUpdateOne) ClearPhoneNumber() *OrganizationUpdateOne {
	_u.mutation.ClearPhoneNumber()
	return _u
}

// SetAddress sets the "address" field.
func (_u *OrganizationUpdateOne) SetAddress(v string) *OrganizationUpdateOne {
	_u.mutation.SetAddress(v)
	return _u
}

// SetNillableAddress sets the "address" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableAddress(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetAddress(*v)
	}
	return _u
}

// ClearAddress clears the value of the "address" field.
func (_u *OrganizationUpdateOne) ClearAddress() *OrganizationUpdateOne {
	_u.mutation.ClearAddress()
	return _u
}

// SetCity sets the "city" field.
func (_u *OrganizationUpdateOne) SetCity(v string) *OrganizationUpdateOne {
	_u.mutation.SetCity(v)
	return _u
}

// SetNillableCity sets the "city" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableCity(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetCity(*v)
	}
	return _u
}

// ClearCity clears the value of the "city" field.
func (_u *OrganizationUpdateOne) ClearCity() *OrganizationUpdateOne {
	_u.mutation.ClearCity()
	return _u
}

// SetState sets the "state" field.
func (_u *OrganizationUpdateOne) SetState(v string) *OrganizationUpdateOne {
	_u.mutation.SetState(v)
	return _u
}

// SetNillableState sets the "state" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableState(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetState(*v)
	}
	return _u
}

// ClearState clears the value of the "state" field.
func (_u *OrganizationUpdateOne) ClearState() *OrganizationUpdateOne {
	_u.mutation.ClearState()
	return _u
}

// SetZipCode sets the "zip_code" field.
func (_u *OrganizationUpdateOne) SetZipCode(v string) *OrganizationUpdateOne {
	_u.mutation.SetZipCode(v)
	return _u
}

// SetNillableZipCode sets the "zip_code" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableZipCode(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetZipCode(*v)
	}
	return _u
}

// ClearZipCode clears the value of the "zip_code" field.
func (_u *OrganizationUpdateOne) ClearZipCode() *OrganizationUpdateOne {
	_u.mutation.ClearZipCode()
	return _u
}

// SetCountry sets the "country" field.
func (_u *OrganizationUpdateOne) SetCountry(v string) *OrganizationUpdateOne {
	_u.mutation.SetCountry(v)
	return _u
}

// SetNillableCountry sets the "country" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableCountry(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetCountry(*v)
	}
	return _u
}

// ClearCountry clears the value of the "country" field.
func (_u *OrganizationUpdateOne) ClearCountry() *OrganizationUpdateOne {
	_u.mutation.ClearCountry()
	return _u
}

// SetLanguage sets the "language" field.
func (_u *OrganizationUpdateOne) SetLanguage(v organization.Language) *OrganizationUpdateOne {
	_u.mutation.SetLanguage(v)
	return _u
}

// SetNillableLanguage sets the "language" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableLanguage(v *organization.Language) *OrganizationUpdateOne {
	if v != nil {
		_u.SetLanguage(*v)
	}
	return _u
}

// ClearLanguage clears the value of the "language" field.
func (_u *OrganizationUpdateOne) ClearLanguage() *OrganizationUpdateOne {
	_u.mutation.ClearLanguage()
	return _u
}

// SetTimezone sets the "timezone" field.
func (_u *OrganizationUpdateOne) SetTimezone(v string) *OrganizationUpdateOne {
	_u.mutation.SetTimezone(v)
	return _u
}

// SetNillableTimezone sets the "timezone" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableTimezone(v *string) *OrganizationUpdateOne {
	if v != nil {
		_u.SetTimezone(*v)
	}
	return _u
}

// ClearTimezone clears the value of the "timezone" field.
func (_u *OrganizationUpdateOne) ClearTimezone() *OrganizationUpdateOne {
	_u.mutation.ClearTimezone()
	return _u
}

// SetDeleted sets the "deleted" field.
func (_u *OrganizationUpdateOne) SetDeleted(v bool) *OrganizationUpdateOne {
	_u.mutation.SetDeleted(v)
	return _u
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDeleted(v *bool) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDeleted(*v)
	}
	return _u
}

// SetDisabled sets the "disabled" field.
func (_u *OrganizationUpdateOne) SetDisabled(v bool) *OrganizationUpdateOne {
	_u.mutation.SetDisabled(v)
	return _u
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDisabled(v *bool) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDisabled(*v)
	}
	return _u
}

// SetDeletedAt sets the "deleted_at" field.
func (_u *OrganizationUpdateOne) SetDeletedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetDeletedAt(v)
	return _u
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDeletedAt(v *time.Time) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDeletedAt(*v)
	}
	return _u
}

// ClearDeletedAt clears the value of the "deleted_at" field.
func (_u *OrganizationUpdateOne) ClearDeletedAt() *OrganizationUpdateOne {
	_u.mutation.ClearDeletedAt()
	return _u
}

// SetDisabledAt sets the "disabled_at" field.
func (_u *OrganizationUpdateOne) SetDisabledAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetDisabledAt(v)
	return _u
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableDisabledAt(v *time.Time) *OrganizationUpdateOne {
	if v != nil {
		_u.SetDisabledAt(*v)
	}
	return _u
}

// ClearDisabledAt clears the value of the "disabled_at" field.
func (_u *OrganizationUpdateOne) ClearDisabledAt() *OrganizationUpdateOne {
	_u.mutation.ClearDisabledAt()
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *OrganizationUpdateOne) SetCreatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *OrganizationUpdateOne) SetNillableCreatedAt(v *time.Time) *OrganizationUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *OrganizationUpdateOne) SetUpdatedAt(v time.Time) *OrganizationUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the OrganizationMutation object of the builder.
func (_u *OrganizationUpdateOne) Mutation() *OrganizationMutation {
	return _u.mutation
}

// Where appends a list predicates to the OrganizationUpdate builder.
func (_u *OrganizationUpdateOne) Where(ps ...predicate.Organization) *OrganizationUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *OrganizationUpdateOne) Select(field string, fields ...string) *OrganizationUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Organization entity.
func (_u *OrganizationUpdateOne) Save(ctx context.Context) (*Organization, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *OrganizationUpdateOne) SaveX(ctx context.Context) *Organization {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *OrganizationUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *OrganizationUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *OrganizationUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := organization.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *OrganizationUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := organization.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Organization.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Language(); ok {
		if err := organization.LanguageValidator(v); err != nil {
			return &ValidationError{Name: "language", err: fmt.Errorf(`ent: validator failed for field "Organization.language": %w`, err)}
		}
	}
	return nil
}

func (_u *OrganizationUpdateOne) sqlSave(ctx context.Context) (_node *Organization, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(organization.Table, organization.Columns, sqlgraph.NewFieldSpec(organization.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Organization.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, organization.FieldID)
		for _, f := range fields {
			if !organization.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != organization.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(organization.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(organization.FieldDescription, field.TypeString, value)
	}
	if _u.mutation.DescriptionCleared() {
		_spec.ClearField(organization.FieldDescription, field.TypeString)
	}
	if value, ok := _u.mutation.LogoURL(); ok {
		_spec.SetField(organization.FieldLogoURL, field.TypeString, value)
	}
	if _u.mutation.LogoURLCleared() {
		_spec.ClearField(organization.FieldLogoURL, field.TypeString)
	}
	if value, ok := _u.mutation.Email(); ok {
		_spec.SetField(organization.FieldEmail, field.TypeString, value)
	}
	if _u.mutation.EmailCleared() {
		_spec.ClearField(organization.FieldEmail, field.TypeString)
	}
	if value, ok := _u.mutation.Website(); ok {
		_spec.SetField(organization.FieldWebsite, field.TypeString, value)
	}
	if _u.mutation.WebsiteCleared() {
		_spec.ClearField(organization.FieldWebsite, field.TypeString)
	}
	if value, ok := _u.mutation.PhoneNumber(); ok {
		_spec.SetField(organization.FieldPhoneNumber, field.TypeString, value)
	}
	if _u.mutation.PhoneNumberCleared() {
		_spec.ClearField(organization.FieldPhoneNumber, field.TypeString)
	}
	if value, ok := _u.mutation.Address(); ok {
		_spec.SetField(organization.FieldAddress, field.TypeString, value)
	}
	if _u.mutation.AddressCleared() {
		_spec.ClearField(organization.FieldAddress, field.TypeString)
	}
	if value, ok := _u.mutation.City(); ok {
		_spec.SetField(organization.FieldCity, field.TypeString, value)
	}
	if _u.mutation.CityCleared() {
		_spec.ClearField(organization.FieldCity, field.TypeString)
	}
	if value, ok := _u.mutation.State(); ok {
		_spec.SetField(organization.FieldState, field.TypeString, value)
	}
	if _u.mutation.StateCleared() {
		_spec.ClearField(organization.FieldState, field.TypeString)
	}
	if value, ok := _u.mutation.ZipCode(); ok {
		_spec.SetField(organization.FieldZipCode, field.TypeString, value)
	}
	if _u.mutation.ZipCodeCleared() {
		_spec.ClearField(organization.FieldZipCode, field.TypeString)
	}
	if value, ok := _u.mutation.Country(); ok {
		_spec.SetField(organization.FieldCountry, field.TypeString, value)
	}
	if _u.mutation.CountryCleared() {
		_spec.ClearField(organization.FieldCountry, field.TypeString)
	}
	if value, ok := _u.mutation.Language(); ok {
		_spec.SetField(organization.FieldLanguage, field.TypeEnum, value)
	}
	if _u.mutation.LanguageCleared() {
		_spec.ClearField(organization.FieldLanguage, field.TypeEnum)
	}
	if value, ok := _u.mutation.Timezone(); ok {
		_spec.SetField(organization.FieldTimezone, field.TypeString, value)
	}
	if _u.mutation.TimezoneCleared() {
		_spec.ClearField(organization.FieldTimezone, field.TypeString)
	}
	if value, ok := _u.mutation.Deleted(); ok {
		_spec.SetField(organization.FieldDeleted, field.TypeBool, value)
	}
	if value, ok := _u.mutation.Disabled(); ok {
		_spec.SetField(organization.FieldDisabled, field.TypeBool, value)
	}
	if value, ok := _u.mutation.DeletedAt(); ok {
		_spec.SetField(organization.FieldDeletedAt, field.TypeTime, value)
	}
	if _u.mutation.DeletedAtCleared() {
		_spec.ClearField(organization.FieldDeletedAt, field.TypeTime)
	}
	if value, ok := _u.mutation.DisabledAt(); ok {
		_spec.SetField(organization.FieldDisabledAt, field.TypeTime, value)
	}
	if _u.mutation.DisabledAtCleared() {
		_spec.ClearField(organization.FieldDisabledAt, field.TypeTime)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(organization.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(organization.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Organization{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{organization.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}

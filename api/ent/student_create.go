// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/guardian"
	"goapi/ent/student"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// StudentCreate is the builder for creating a Student entity.
type StudentCreate struct {
	config
	mutation *StudentMutation
	hooks    []Hook
}

// SetPhotoURL sets the "photo_url" field.
func (_c *StudentCreate) SetPhotoURL(v string) *StudentCreate {
	_c.mutation.SetPhotoURL(v)
	return _c
}

// SetNillablePhotoURL sets the "photo_url" field if the given value is not nil.
func (_c *StudentCreate) SetNillablePhotoURL(v *string) *StudentCreate {
	if v != nil {
		_c.SetPhotoURL(*v)
	}
	return _c
}

// SetFirstName sets the "first_name" field.
func (_c *StudentCreate) SetFirstName(v string) *StudentCreate {
	_c.mutation.SetFirstName(v)
	return _c
}

// SetLastName sets the "last_name" field.
func (_c *StudentCreate) SetLastName(v string) *StudentCreate {
	_c.mutation.SetLastName(v)
	return _c
}

// SetNillableLastName sets the "last_name" field if the given value is not nil.
func (_c *StudentCreate) SetNillableLastName(v *string) *StudentCreate {
	if v != nil {
		_c.SetLastName(*v)
	}
	return _c
}

// SetMiddleName sets the "middle_name" field.
func (_c *StudentCreate) SetMiddleName(v string) *StudentCreate {
	_c.mutation.SetMiddleName(v)
	return _c
}

// SetNillableMiddleName sets the "middle_name" field if the given value is not nil.
func (_c *StudentCreate) SetNillableMiddleName(v *string) *StudentCreate {
	if v != nil {
		_c.SetMiddleName(*v)
	}
	return _c
}

// SetPhoneNumber sets the "phone_number" field.
func (_c *StudentCreate) SetPhoneNumber(v string) *StudentCreate {
	_c.mutation.SetPhoneNumber(v)
	return _c
}

// SetEmail sets the "email" field.
func (_c *StudentCreate) SetEmail(v string) *StudentCreate {
	_c.mutation.SetEmail(v)
	return _c
}

// SetNillableEmail sets the "email" field if the given value is not nil.
func (_c *StudentCreate) SetNillableEmail(v *string) *StudentCreate {
	if v != nil {
		_c.SetEmail(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *StudentCreate) SetDeleted(v bool) *StudentCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *StudentCreate) SetNillableDeleted(v *bool) *StudentCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// SetDisabled sets the "disabled" field.
func (_c *StudentCreate) SetDisabled(v bool) *StudentCreate {
	_c.mutation.SetDisabled(v)
	return _c
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_c *StudentCreate) SetNillableDisabled(v *bool) *StudentCreate {
	if v != nil {
		_c.SetDisabled(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *StudentCreate) SetDeletedAt(v time.Time) *StudentCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillableDeletedAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDisabledAt sets the "disabled_at" field.
func (_c *StudentCreate) SetDisabledAt(v time.Time) *StudentCreate {
	_c.mutation.SetDisabledAt(v)
	return _c
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillableDisabledAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetDisabledAt(*v)
	}
	return _c
}

// SetLastSignedInAt sets the "last_signed_in_at" field.
func (_c *StudentCreate) SetLastSignedInAt(v time.Time) *StudentCreate {
	_c.mutation.SetLastSignedInAt(v)
	return _c
}

// SetNillableLastSignedInAt sets the "last_signed_in_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillableLastSignedInAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetLastSignedInAt(*v)
	}
	return _c
}

// SetPhoneConfirmedAt sets the "phone_confirmed_at" field.
func (_c *StudentCreate) SetPhoneConfirmedAt(v time.Time) *StudentCreate {
	_c.mutation.SetPhoneConfirmedAt(v)
	return _c
}

// SetNillablePhoneConfirmedAt sets the "phone_confirmed_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillablePhoneConfirmedAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetPhoneConfirmedAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *StudentCreate) SetCreatedAt(v time.Time) *StudentCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillableCreatedAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *StudentCreate) SetUpdatedAt(v time.Time) *StudentCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *StudentCreate) SetNillableUpdatedAt(v *time.Time) *StudentCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *StudentCreate) SetID(v string) *StudentCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *StudentCreate) SetNillableID(v *string) *StudentCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// AddGuardianIDs adds the "guardians" edge to the Guardian entity by IDs.
func (_c *StudentCreate) AddGuardianIDs(ids ...string) *StudentCreate {
	_c.mutation.AddGuardianIDs(ids...)
	return _c
}

// AddGuardians adds the "guardians" edges to the Guardian entity.
func (_c *StudentCreate) AddGuardians(v ...*Guardian) *StudentCreate {
	ids := make([]string, len(v))
	for i := range v {
		ids[i] = v[i].ID
	}
	return _c.AddGuardianIDs(ids...)
}

// Mutation returns the StudentMutation object of the builder.
func (_c *StudentCreate) Mutation() *StudentMutation {
	return _c.mutation
}

// Save creates the Student in the database.
func (_c *StudentCreate) Save(ctx context.Context) (*Student, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *StudentCreate) SaveX(ctx context.Context) *Student {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StudentCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StudentCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *StudentCreate) defaults() {
	if _, ok := _c.mutation.Deleted(); !ok {
		v := student.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		v := student.DefaultDisabled
		_c.mutation.SetDisabled(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := student.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := student.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := student.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *StudentCreate) check() error {
	if _, ok := _c.mutation.FirstName(); !ok {
		return &ValidationError{Name: "first_name", err: errors.New(`ent: missing required field "Student.first_name"`)}
	}
	if v, ok := _c.mutation.FirstName(); ok {
		if err := student.FirstNameValidator(v); err != nil {
			return &ValidationError{Name: "first_name", err: fmt.Errorf(`ent: validator failed for field "Student.first_name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.PhoneNumber(); !ok {
		return &ValidationError{Name: "phone_number", err: errors.New(`ent: missing required field "Student.phone_number"`)}
	}
	if v, ok := _c.mutation.PhoneNumber(); ok {
		if err := student.PhoneNumberValidator(v); err != nil {
			return &ValidationError{Name: "phone_number", err: fmt.Errorf(`ent: validator failed for field "Student.phone_number": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Student.deleted"`)}
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Student.disabled"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Student.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Student.updated_at"`)}
	}
	return nil
}

func (_c *StudentCreate) sqlSave(ctx context.Context) (*Student, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Student.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *StudentCreate) createSpec() (*Student, *sqlgraph.CreateSpec) {
	var (
		_node = &Student{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(student.Table, sqlgraph.NewFieldSpec(student.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.PhotoURL(); ok {
		_spec.SetField(student.FieldPhotoURL, field.TypeString, value)
		_node.PhotoURL = value
	}
	if value, ok := _c.mutation.FirstName(); ok {
		_spec.SetField(student.FieldFirstName, field.TypeString, value)
		_node.FirstName = value
	}
	if value, ok := _c.mutation.LastName(); ok {
		_spec.SetField(student.FieldLastName, field.TypeString, value)
		_node.LastName = value
	}
	if value, ok := _c.mutation.MiddleName(); ok {
		_spec.SetField(student.FieldMiddleName, field.TypeString, value)
		_node.MiddleName = value
	}
	if value, ok := _c.mutation.PhoneNumber(); ok {
		_spec.SetField(student.FieldPhoneNumber, field.TypeString, value)
		_node.PhoneNumber = value
	}
	if value, ok := _c.mutation.Email(); ok {
		_spec.SetField(student.FieldEmail, field.TypeString, value)
		_node.Email = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(student.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := _c.mutation.Disabled(); ok {
		_spec.SetField(student.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(student.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DisabledAt(); ok {
		_spec.SetField(student.FieldDisabledAt, field.TypeTime, value)
		_node.DisabledAt = value
	}
	if value, ok := _c.mutation.LastSignedInAt(); ok {
		_spec.SetField(student.FieldLastSignedInAt, field.TypeTime, value)
		_node.LastSignedInAt = value
	}
	if value, ok := _c.mutation.PhoneConfirmedAt(); ok {
		_spec.SetField(student.FieldPhoneConfirmedAt, field.TypeTime, value)
		_node.PhoneConfirmedAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(student.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(student.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if nodes := _c.mutation.GuardiansIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   student.GuardiansTable,
			Columns: student.GuardiansPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(guardian.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// StudentCreateBulk is the builder for creating many Student entities in bulk.
type StudentCreateBulk struct {
	config
	err      error
	builders []*StudentCreate
}

// Save creates the Student entities in the database.
func (_c *StudentCreateBulk) Save(ctx context.Context) ([]*Student, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Student, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*StudentMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *StudentCreateBulk) SaveX(ctx context.Context) []*Student {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *StudentCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *StudentCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/role"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleCreate is the builder for creating a Role entity.
type RoleCreate struct {
	config
	mutation *RoleMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (_c *RoleCreate) SetName(v string) *RoleCreate {
	_c.mutation.SetName(v)
	return _c
}

// SetSlug sets the "slug" field.
func (_c *RoleCreate) SetSlug(v string) *RoleCreate {
	_c.mutation.SetSlug(v)
	return _c
}

// SetDescription sets the "description" field.
func (_c *RoleCreate) SetDescription(v string) *RoleCreate {
	_c.mutation.SetDescription(v)
	return _c
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDescription(v *string) *RoleCreate {
	if v != nil {
		_c.SetDescription(*v)
	}
	return _c
}

// SetOrganizationID sets the "organization_id" field.
func (_c *RoleCreate) SetOrganizationID(v string) *RoleCreate {
	_c.mutation.SetOrganizationID(v)
	return _c
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_c *RoleCreate) SetNillableOrganizationID(v *string) *RoleCreate {
	if v != nil {
		_c.SetOrganizationID(*v)
	}
	return _c
}

// SetPermissions sets the "permissions" field.
func (_c *RoleCreate) SetPermissions(v []string) *RoleCreate {
	_c.mutation.SetPermissions(v)
	return _c
}

// SetGlobal sets the "global" field.
func (_c *RoleCreate) SetGlobal(v bool) *RoleCreate {
	_c.mutation.SetGlobal(v)
	return _c
}

// SetNillableGlobal sets the "global" field if the given value is not nil.
func (_c *RoleCreate) SetNillableGlobal(v *bool) *RoleCreate {
	if v != nil {
		_c.SetGlobal(*v)
	}
	return _c
}

// SetDeleted sets the "deleted" field.
func (_c *RoleCreate) SetDeleted(v bool) *RoleCreate {
	_c.mutation.SetDeleted(v)
	return _c
}

// SetNillableDeleted sets the "deleted" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDeleted(v *bool) *RoleCreate {
	if v != nil {
		_c.SetDeleted(*v)
	}
	return _c
}

// SetDisabled sets the "disabled" field.
func (_c *RoleCreate) SetDisabled(v bool) *RoleCreate {
	_c.mutation.SetDisabled(v)
	return _c
}

// SetNillableDisabled sets the "disabled" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDisabled(v *bool) *RoleCreate {
	if v != nil {
		_c.SetDisabled(*v)
	}
	return _c
}

// SetDeletedAt sets the "deleted_at" field.
func (_c *RoleCreate) SetDeletedAt(v time.Time) *RoleCreate {
	_c.mutation.SetDeletedAt(v)
	return _c
}

// SetNillableDeletedAt sets the "deleted_at" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDeletedAt(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetDeletedAt(*v)
	}
	return _c
}

// SetDisabledAt sets the "disabled_at" field.
func (_c *RoleCreate) SetDisabledAt(v time.Time) *RoleCreate {
	_c.mutation.SetDisabledAt(v)
	return _c
}

// SetNillableDisabledAt sets the "disabled_at" field if the given value is not nil.
func (_c *RoleCreate) SetNillableDisabledAt(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetDisabledAt(*v)
	}
	return _c
}

// SetCreatedAt sets the "created_at" field.
func (_c *RoleCreate) SetCreatedAt(v time.Time) *RoleCreate {
	_c.mutation.SetCreatedAt(v)
	return _c
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_c *RoleCreate) SetNillableCreatedAt(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetCreatedAt(*v)
	}
	return _c
}

// SetUpdatedAt sets the "updated_at" field.
func (_c *RoleCreate) SetUpdatedAt(v time.Time) *RoleCreate {
	_c.mutation.SetUpdatedAt(v)
	return _c
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (_c *RoleCreate) SetNillableUpdatedAt(v *time.Time) *RoleCreate {
	if v != nil {
		_c.SetUpdatedAt(*v)
	}
	return _c
}

// SetID sets the "id" field.
func (_c *RoleCreate) SetID(v string) *RoleCreate {
	_c.mutation.SetID(v)
	return _c
}

// SetNillableID sets the "id" field if the given value is not nil.
func (_c *RoleCreate) SetNillableID(v *string) *RoleCreate {
	if v != nil {
		_c.SetID(*v)
	}
	return _c
}

// Mutation returns the RoleMutation object of the builder.
func (_c *RoleCreate) Mutation() *RoleMutation {
	return _c.mutation
}

// Save creates the Role in the database.
func (_c *RoleCreate) Save(ctx context.Context) (*Role, error) {
	_c.defaults()
	return withHooks(ctx, _c.sqlSave, _c.mutation, _c.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (_c *RoleCreate) SaveX(ctx context.Context) *Role {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleCreate) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleCreate) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_c *RoleCreate) defaults() {
	if _, ok := _c.mutation.Permissions(); !ok {
		v := role.DefaultPermissions()
		_c.mutation.SetPermissions(v)
	}
	if _, ok := _c.mutation.Global(); !ok {
		v := role.DefaultGlobal
		_c.mutation.SetGlobal(v)
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		v := role.DefaultDeleted
		_c.mutation.SetDeleted(v)
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		v := role.DefaultDisabled
		_c.mutation.SetDisabled(v)
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		v := role.DefaultCreatedAt()
		_c.mutation.SetCreatedAt(v)
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		v := role.DefaultUpdatedAt()
		_c.mutation.SetUpdatedAt(v)
	}
	if _, ok := _c.mutation.ID(); !ok {
		v := role.DefaultID()
		_c.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_c *RoleCreate) check() error {
	if _, ok := _c.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Role.name"`)}
	}
	if v, ok := _c.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Slug(); !ok {
		return &ValidationError{Name: "slug", err: errors.New(`ent: missing required field "Role.slug"`)}
	}
	if v, ok := _c.mutation.Slug(); ok {
		if err := role.SlugValidator(v); err != nil {
			return &ValidationError{Name: "slug", err: fmt.Errorf(`ent: validator failed for field "Role.slug": %w`, err)}
		}
	}
	if _, ok := _c.mutation.Permissions(); !ok {
		return &ValidationError{Name: "permissions", err: errors.New(`ent: missing required field "Role.permissions"`)}
	}
	if _, ok := _c.mutation.Global(); !ok {
		return &ValidationError{Name: "global", err: errors.New(`ent: missing required field "Role.global"`)}
	}
	if _, ok := _c.mutation.Deleted(); !ok {
		return &ValidationError{Name: "deleted", err: errors.New(`ent: missing required field "Role.deleted"`)}
	}
	if _, ok := _c.mutation.Disabled(); !ok {
		return &ValidationError{Name: "disabled", err: errors.New(`ent: missing required field "Role.disabled"`)}
	}
	if _, ok := _c.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Role.created_at"`)}
	}
	if _, ok := _c.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Role.updated_at"`)}
	}
	return nil
}

func (_c *RoleCreate) sqlSave(ctx context.Context) (*Role, error) {
	if err := _c.check(); err != nil {
		return nil, err
	}
	_node, _spec := _c.createSpec()
	if err := sqlgraph.CreateNode(ctx, _c.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected Role.ID type: %T", _spec.ID.Value)
		}
	}
	_c.mutation.id = &_node.ID
	_c.mutation.done = true
	return _node, nil
}

func (_c *RoleCreate) createSpec() (*Role, *sqlgraph.CreateSpec) {
	var (
		_node = &Role{config: _c.config}
		_spec = sqlgraph.NewCreateSpec(role.Table, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	)
	if id, ok := _c.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := _c.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := _c.mutation.Slug(); ok {
		_spec.SetField(role.FieldSlug, field.TypeString, value)
		_node.Slug = value
	}
	if value, ok := _c.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := _c.mutation.OrganizationID(); ok {
		_spec.SetField(role.FieldOrganizationID, field.TypeString, value)
		_node.OrganizationID = value
	}
	if value, ok := _c.mutation.Permissions(); ok {
		_spec.SetField(role.FieldPermissions, field.TypeJSON, value)
		_node.Permissions = value
	}
	if value, ok := _c.mutation.Global(); ok {
		_spec.SetField(role.FieldGlobal, field.TypeBool, value)
		_node.Global = value
	}
	if value, ok := _c.mutation.Deleted(); ok {
		_spec.SetField(role.FieldDeleted, field.TypeBool, value)
		_node.Deleted = value
	}
	if value, ok := _c.mutation.Disabled(); ok {
		_spec.SetField(role.FieldDisabled, field.TypeBool, value)
		_node.Disabled = value
	}
	if value, ok := _c.mutation.DeletedAt(); ok {
		_spec.SetField(role.FieldDeletedAt, field.TypeTime, value)
		_node.DeletedAt = value
	}
	if value, ok := _c.mutation.DisabledAt(); ok {
		_spec.SetField(role.FieldDisabledAt, field.TypeTime, value)
		_node.DisabledAt = value
	}
	if value, ok := _c.mutation.CreatedAt(); ok {
		_spec.SetField(role.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if value, ok := _c.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	return _node, _spec
}

// RoleCreateBulk is the builder for creating many Role entities in bulk.
type RoleCreateBulk struct {
	config
	err      error
	builders []*RoleCreate
}

// Save creates the Role entities in the database.
func (_c *RoleCreateBulk) Save(ctx context.Context) ([]*Role, error) {
	if _c.err != nil {
		return nil, _c.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(_c.builders))
	nodes := make([]*Role, len(_c.builders))
	mutators := make([]Mutator, len(_c.builders))
	for i := range _c.builders {
		func(i int, root context.Context) {
			builder := _c.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RoleMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, _c.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, _c.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, _c.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (_c *RoleCreateBulk) SaveX(ctx context.Context) []*Role {
	v, err := _c.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (_c *RoleCreateBulk) Exec(ctx context.Context) error {
	_, err := _c.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_c *RoleCreateBulk) ExecX(ctx context.Context) {
	if err := _c.Exec(ctx); err != nil {
		panic(err)
	}
}

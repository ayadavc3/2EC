// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"goapi/ent/predicate"
	"goapi/ent/role"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// RoleUpdate is the builder for updating Role entities.
type RoleUpdate struct {
	config
	hooks    []Hook
	mutation *RoleMutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdate) Where(ps ...predicate.Role) *RoleUpdate {
	_u.mutation.Where(ps...)
	return _u
}

// SetName sets the "name" field.
func (_u *RoleUpdate) SetName(v string) *RoleUpdate {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableName(v *string) *RoleUpdate {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *RoleUpdate) SetDescription(v string) *RoleUpdate {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableDescription(v *string) *RoleUpdate {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *RoleUpdate) SetOrganizationID(v string) *RoleUpdate {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableOrganizationID(v *string) *RoleUpdate {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetPermissions sets the "permissions" field.
func (_u *RoleUpdate) SetPermissions(v string) *RoleUpdate {
	_u.mutation.SetPermissions(v)
	return _u
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (_u *RoleUpdate) SetNillablePermissions(v *string) *RoleUpdate {
	if v != nil {
		_u.SetPermissions(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RoleUpdate) SetCreatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RoleUpdate) SetNillableCreatedAt(v *time.Time) *RoleUpdate {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdate) SetUpdatedAt(v time.Time) *RoleUpdate {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdate) Mutation() *RoleMutation {
	return _u.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (_u *RoleUpdate) Save(ctx context.Context) (int, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdate) SaveX(ctx context.Context) int {
	affected, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (_u *RoleUpdate) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdate) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdate) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdate) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := role.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Role.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OrganizationID(); ok {
		if err := role.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Role.organization_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Permissions(); ok {
		if err := role.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "Role.permissions": %w`, err)}
		}
	}
	return nil
}

func (_u *RoleUpdate) sqlSave(ctx context.Context) (_node int, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(role.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Permissions(); ok {
		_spec.SetField(role.FieldPermissions, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(role.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	if _node, err = sqlgraph.UpdateNodes(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	_u.mutation.done = true
	return _node, nil
}

// RoleUpdateOne is the builder for updating a single Role entity.
type RoleUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *RoleMutation
}

// SetName sets the "name" field.
func (_u *RoleUpdateOne) SetName(v string) *RoleUpdateOne {
	_u.mutation.SetName(v)
	return _u
}

// SetNillableName sets the "name" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableName(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetName(*v)
	}
	return _u
}

// SetDescription sets the "description" field.
func (_u *RoleUpdateOne) SetDescription(v string) *RoleUpdateOne {
	_u.mutation.SetDescription(v)
	return _u
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableDescription(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetDescription(*v)
	}
	return _u
}

// SetOrganizationID sets the "organization_id" field.
func (_u *RoleUpdateOne) SetOrganizationID(v string) *RoleUpdateOne {
	_u.mutation.SetOrganizationID(v)
	return _u
}

// SetNillableOrganizationID sets the "organization_id" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableOrganizationID(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetOrganizationID(*v)
	}
	return _u
}

// SetPermissions sets the "permissions" field.
func (_u *RoleUpdateOne) SetPermissions(v string) *RoleUpdateOne {
	_u.mutation.SetPermissions(v)
	return _u
}

// SetNillablePermissions sets the "permissions" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillablePermissions(v *string) *RoleUpdateOne {
	if v != nil {
		_u.SetPermissions(*v)
	}
	return _u
}

// SetCreatedAt sets the "created_at" field.
func (_u *RoleUpdateOne) SetCreatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetCreatedAt(v)
	return _u
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (_u *RoleUpdateOne) SetNillableCreatedAt(v *time.Time) *RoleUpdateOne {
	if v != nil {
		_u.SetCreatedAt(*v)
	}
	return _u
}

// SetUpdatedAt sets the "updated_at" field.
func (_u *RoleUpdateOne) SetUpdatedAt(v time.Time) *RoleUpdateOne {
	_u.mutation.SetUpdatedAt(v)
	return _u
}

// Mutation returns the RoleMutation object of the builder.
func (_u *RoleUpdateOne) Mutation() *RoleMutation {
	return _u.mutation
}

// Where appends a list predicates to the RoleUpdate builder.
func (_u *RoleUpdateOne) Where(ps ...predicate.Role) *RoleUpdateOne {
	_u.mutation.Where(ps...)
	return _u
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (_u *RoleUpdateOne) Select(field string, fields ...string) *RoleUpdateOne {
	_u.fields = append([]string{field}, fields...)
	return _u
}

// Save executes the query and returns the updated Role entity.
func (_u *RoleUpdateOne) Save(ctx context.Context) (*Role, error) {
	_u.defaults()
	return withHooks(ctx, _u.sqlSave, _u.mutation, _u.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (_u *RoleUpdateOne) SaveX(ctx context.Context) *Role {
	node, err := _u.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (_u *RoleUpdateOne) Exec(ctx context.Context) error {
	_, err := _u.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (_u *RoleUpdateOne) ExecX(ctx context.Context) {
	if err := _u.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (_u *RoleUpdateOne) defaults() {
	if _, ok := _u.mutation.UpdatedAt(); !ok {
		v := role.UpdateDefaultUpdatedAt()
		_u.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (_u *RoleUpdateOne) check() error {
	if v, ok := _u.mutation.Name(); ok {
		if err := role.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Role.name": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Description(); ok {
		if err := role.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Role.description": %w`, err)}
		}
	}
	if v, ok := _u.mutation.OrganizationID(); ok {
		if err := role.OrganizationIDValidator(v); err != nil {
			return &ValidationError{Name: "organization_id", err: fmt.Errorf(`ent: validator failed for field "Role.organization_id": %w`, err)}
		}
	}
	if v, ok := _u.mutation.Permissions(); ok {
		if err := role.PermissionsValidator(v); err != nil {
			return &ValidationError{Name: "permissions", err: fmt.Errorf(`ent: validator failed for field "Role.permissions": %w`, err)}
		}
	}
	return nil
}

func (_u *RoleUpdateOne) sqlSave(ctx context.Context) (_node *Role, err error) {
	if err := _u.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(role.Table, role.Columns, sqlgraph.NewFieldSpec(role.FieldID, field.TypeString))
	id, ok := _u.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Role.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := _u.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, role.FieldID)
		for _, f := range fields {
			if !role.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != role.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := _u.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := _u.mutation.Name(); ok {
		_spec.SetField(role.FieldName, field.TypeString, value)
	}
	if value, ok := _u.mutation.Description(); ok {
		_spec.SetField(role.FieldDescription, field.TypeString, value)
	}
	if value, ok := _u.mutation.OrganizationID(); ok {
		_spec.SetField(role.FieldOrganizationID, field.TypeString, value)
	}
	if value, ok := _u.mutation.Permissions(); ok {
		_spec.SetField(role.FieldPermissions, field.TypeString, value)
	}
	if value, ok := _u.mutation.CreatedAt(); ok {
		_spec.SetField(role.FieldCreatedAt, field.TypeTime, value)
	}
	if value, ok := _u.mutation.UpdatedAt(); ok {
		_spec.SetField(role.FieldUpdatedAt, field.TypeTime, value)
	}
	_node = &Role{config: _u.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, _u.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{role.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	_u.mutation.done = true
	return _node, nil
}
